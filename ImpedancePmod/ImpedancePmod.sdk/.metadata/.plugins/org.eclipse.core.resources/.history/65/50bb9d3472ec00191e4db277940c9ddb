/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "AD5933.h"
#include "MCP23S17.h"
#include "platform.h"
#include "xparameters.h"
#include "sleep.h"
#include "xspi.h"		/* SPI device driver */
#include "xiic.h"
//#include "xiic_l.h"
//#include "xintc.h"
//#include "xgpio.h"
#include "xil_exception.h"
//#define GPIO_EXAMPLE_DEVICE_ID  XPAR_GPIO_0_DEVICE_ID
//XGpio Gpio;

#define SPI_DEVICE_ID		XPAR_SPI_0_DEVICE_ID
static XSpi SpiInstance;


#define BUFFER_SIZE 3
typedef u8 dataBuffer[BUFFER_SIZE];

int SPIPoll(XSpi* spiPTR, u16 spiID);

u8 readBuffer[BUFFER_SIZE];
u8 writeBuffer[BUFFER_SIZE];

int main()
{
	int Status;
	char in;

    init_platform();
	SPIStart();
	XSpi_SetSlaveSelect(&SpiInstance, 0x01);


    print("EI: Impedance measurement program by Gilles Lenaerts.\n\r");

    //Calibrate AD5933 with x resistor (41K now)
    calibration();
    while(1){
    in = getchar();

		if ( ((in == 'A') || (in == 'B') || (in == 'C') || (in == 'D')) && (in != 0) )		//wait for input
		{
			switch (in)
				{
				case 'A' :  XGpio_DiscreteWrite(&Gpio, CHANNEL, SEL0);
							break;
				case 'B' :  XGpio_DiscreteWrite(&Gpio, CHANNEL, SEL1);
							break;
				case 'C' :  XGpio_DiscreteWrite(&Gpio, CHANNEL, SEL2);
							break;
				case 'D' :  XGpio_DiscreteWrite(&Gpio, CHANNEL, SEL3);
							break;
				}
			measureImpedance();
			in = 0;
		}
    measureImpedance();
    sleep_A9(3);
    }

    cleanup_platform();
    return 0;
}
int SPIPoll(XSpi* spiPTR, u16 spiID) {

	XSpi_SetSlaveSelect(spiPTR, 0x01);
    xil_printf("\nStarting SPI transfer\n\r");


		XSpi_Transfer(spiPTR, writeBuffer, readBuffer, BUFFER_SIZE);
		xil_printf("Success\n\r");


	return XST_SUCCESS;
}

