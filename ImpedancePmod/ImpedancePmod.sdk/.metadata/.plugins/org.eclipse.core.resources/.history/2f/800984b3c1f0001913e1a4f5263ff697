#include <stdio.h>
#include <math.h>
//#include "xparameters.h"
#include "MCP23S17.h"
//#include "xspi.h"		/* SPI device driver */
//#include "typedef.h"


/*
* Have to add Registers standard values, HAEN_ON, IODIR, BANK_ON
 */
int SPIStart(XSpi* spiPTR, u16 spiID){
	int Status;
	XSpi_Config *confPTR;

	confPTR = XSpi_LookupConfig(spiID);
	if(confPTR == NULL) {
		return XST_DEVICE_NOT_FOUND;
	}

	Status = XSpi_CfgInitialize(spiPTR, confPTR, confPTR->BaseAddress);
	if(Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	Status = XSpi_SetOptions(spiPTR, XSP_MASTER_OPTION |
			XSP_MANUAL_SSELECT_OPTION );
	if(Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XSpi_Start(spiPTR);
	XSpi_IntrGlobalDisable(spiPTR);

	return XST_SUCCESS;
}

/*
* sorts input array on GPIO adresses.
 */
void portSelection(char RegisterADR, char Port){

	char arrayGPB[3], arrayGPA[3] = {0x00, 0x00, 0x00};
	//int size = (int)(sizeof(arraySelection) / sizeof(arraySelection[0]));

	if (Register == GPIOA_ADR) // GPIOA Register adress
	{
		arrayGPB[2] = GPIOA_ADR;
		arrayGPA[3] = Port;
	}
	else if(Register == GPIOB_ADR) // GPIOB Register adress
	{
		arrayGPB[2] = GPIOB_ADR;
		arrayGPB[3] = Port;
	}

	arrayGPB[1], arrayGPA[1] = MCP23S17_SPI_ADDR;

	XSpi_Transfer(&SpiInstance, arrayGPB, readBuffer, BUFFER_SIZE);
	XSpi_Transfer(&SpiInstance, arrayGPA, readBuffer, BUFFER_SIZE);

	RegisterADR, Port = 0x00;
	return 0;
}

