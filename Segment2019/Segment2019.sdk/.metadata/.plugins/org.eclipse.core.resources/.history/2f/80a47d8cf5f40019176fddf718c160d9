/* FreeRTOS includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
/* Xilinx includes. */
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xgpiops.h"
#include "xuartps_hw.h"

#define TIMER_ID	1
#define DELAY_60_SECONDS	60000UL
#define DELAY_10_SECONDS	10000UL
#define DELAY_1_SECOND		1000UL
#define DELAY_5_SECOND		5000UL

#define TIMER_CHECK_THRESHOLD	9
/*-----------------------------------------------------------*/

/* The Tx and Rx tasks as described at the top of this file. */
static void prvTxTask( void *pvParameters );
static void prvRxTask( void *pvParameters );
static void prvPS_SwitchTask( void *pvParameters );
//static void vTimerCallback( TimerHandle_t pxTimer );
/*-----------------------------------------------------------*/

/* The queue used by the Tx and Rx tasks, as described at the top of this
file. */
static TaskHandle_t xTxTask;
static TaskHandle_t xRxTask;
static TaskHandle_t xprvPS_SwitchTask;
static QueueHandle_t xQueue = NULL;
//static TimerHandle_t xTimer = NULL;
char HWstring[15] = "";

/*
 * Segment GPIO Defines
 */
#define GPIO_7SEGMENT_DEVICE_ID XPAR_GPIO_0_DEVICE_ID
#define SEGMENT_CHANNEL 1

#define SEGMENT7 0b111111111

#define A  0b001000000
#define B  0b010000000
#define C  0b000010000
#define D  0b000100000
#define E  0b000000100
#define F  0b000001000
#define G  0b000000001
#define DP 0b000000010

char segControl;
u32 Data;
XGpio Gpio;
XGpioPs GpioPS;
u32 Input_Pin; /* Switch button */
void startGPIOHardware();
int segment7value(int SegNumber);

int main( void )
{

	xil_printf( "Oefening 12: FreeRTOS Queue... By Gilles.\r\n" );
	startGPIOHardware();

	/* Create the two tasks.  The Tx task is given a lower priority than the
	Rx task, so the Rx task will leave the Blocked state and pre-empt the Tx
	task as soon as the Tx task places an item in the queue. */
	xTaskCreate( 	prvTxTask, 					/* The function that implements the task. */
					( const char * ) "Tx", 		/* Text name for the task, provided to assist debugging only. */
					configMINIMAL_STACK_SIZE, 	/* The stack allocated to the task. */
					NULL, 						/* The task parameter is not used, so set to NULL. */
					tskIDLE_PRIORITY,			/* The task runs at the idle priority. */
					&xTxTask );

	xTaskCreate( 	prvPS_SwitchTask, 					/* The function that implements the task. */
					( const char * ) "Ps_sw", 		/* Text name for the task, provided to assist debugging only. */
					configMINIMAL_STACK_SIZE, 	/* The stack allocated to the task. */
					NULL, 						/* The task parameter is not used, so set to NULL. */
					tskIDLE_PRIORITY,			/* The task runs at the idle priority. */
					&xTxTask );

	xTaskCreate( prvRxTask,
				 ( const char * ) "GB",
				 configMINIMAL_STACK_SIZE,
				 NULL,
				 tskIDLE_PRIORITY + 1,
				 &xRxTask );

	xQueue = xQueueCreate( 	5,						/*5 values. */
							sizeof( Data ) );	/* Each space in the queue is large enough to hold a uint32_t. */

	/* Check the queue was created. */
	configASSERT( xQueue );

	/* Start the tasks and timer running. */
	vTaskStartScheduler();

	for( ;; );
}


/*----------------------Read UART TASK (b)-------------------*/
static void prvTxTask( void *pvParameters )
{
	const TickType_t x1second = pdMS_TO_TICKS( DELAY_1_SECOND );
	const TickType_t x5second = pdMS_TO_TICKS( DELAY_5_SECOND );
	for( ;; )
	{
		/* Delay for 1 second. */
		vTaskDelay( x5second );
		if (XUartPs_IsReceiveData(STDIN_BASEADDRESS)) {
		    Data = inbyte();
		}

		xQueueSend( xQueue,			/* The queue being written to. */
					&Data, /* The address of the data being sent. */
					0UL );			/* The block time. */
	}
}

/*--------------7Segment Display TASK (a)--------------*/
static void prvRxTask( void *pvParameters )
{
char Recdstring[15] = "";
u32 RecData;
int number, value = 0;
	for( ;; )
	{
		/* Block to wait for data arriving on the queue. */
		xQueueReceive( 	xQueue,				/* The queue being read. */
						&RecData,	/* Data is read into this address. */
						portMAX_DELAY );	/* Wait without a timeout for data. */

		/* Print the received data. */
		//xil_printf( "Rx task received string from Tx task: %s\r\n", segControl );
		printf("Input value got: %d\r\n",(int) RecData);
		XGpio_DiscreteWrite(&Gpio,SEGMENT_CHANNEL,segment7value((int) RecData));
		RecData = 0;
	}
}

/*--------------Read PS Switch (c)--------------*/
static void prvPS_SwitchTask( void *pvParameters )
{

	for( ;; )
	{

		if (XGpioPs_ReadPin(&GpioPS, Input_Pin)) Data = 0;
		xQueueSend( xQueue,			/* The queue being written to. */
					&Data, /* The address of the data being sent. */
					0UL );			/* The block time. */
	}
}

/*-----------------------------------------------------------*/
int segment7value(int SegNumber)
{
	int value=0;
	switch (SegNumber)
	{
		case 0:
			value = A + B + C + D + E + F;
			break;
		case 1:
			value = B + C;
			break;
		case 2:
			value = A + B + G + E + D;
			break;
		case 3:
			value = A + B + G + C + D;
			break;
		case 4:
			value = F + G + B + C;
			break;
		case 5:
			value = A + F + G + C + D;
			break;
		case 6:
			value = A + F + G + E + C + D;
			break;
		case 7:
			value = A + B + C;
			break;
		case 8:
			value = A + B + C + D + E + F + G;
			break;
		case 9:
			value = A + B + C + D + F + G;
			break;
		case 10:
			value = E + F + A + B + G + C;
			break;
		case 11:
			value = F + G + C + D + E;
			break;
		case 12:
			value = A + F + E + D;
			break;
		case 13:
			value = B + G + E + D + C;
			break;
		case 14:
			value = A + F + G + E + D;
			break;
		case 15:
			value = A + F + G + E;
			break;
		default:
			value = DP;
	}

	return value;
}
void startGPIOHardware()
{
	volatile int Delay;

	int status;

	//Init PS
	XGpioPs_Config *GPIOPSConfigPtr;
	GPIOPSConfigPtr = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
	status = XGpioPs_CfgInitialize(&GpioPS, GPIOPSConfigPtr,GPIOPSConfigPtr->BaseAddr);

	if (status != XST_SUCCESS) {
		printf("status error \n\r");
		return XST_FAILURE;
	}
    printf("Starting GPIO PS\n\r");
    Input_Pin = 0;
	XGpioPs_SetDirectionPin(&GpioPS,Input_Pin,0);

	//Init PL
	XGpio_Config *GPIOConfigPtr;
	status = XGpio_Initialize(&Gpio, GPIO_7SEGMENT_DEVICE_ID);
	if (status != XST_SUCCESS) {
		xil_printf("Gpio Initialization Failed\r\n");
		return XST_FAILURE;
	}

	XGpio_SetDataDirection(&Gpio, SEGMENT_CHANNEL, ~SEGMENT7);
	XGpio_DiscreteWrite(&Gpio,SEGMENT_CHANNEL,0);

    return;
}

